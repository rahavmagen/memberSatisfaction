package hibernateDataFiles;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;




/**
 * MembersAnswers generated by hbm2java
 */
@Entity
@Table(name = "members_answers", schema = "edi_ms")
public class MemberAnswer implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private MemberAnswerId id;
	private PossibleAnswer possibleAnswer;
	private QuestionIgnoreJson question;
	private Survey survey;
	private String freeTextAnswer;
	private CategoryIgnoreJson category;

	public MemberAnswer() {
	}

	public MemberAnswer(MemberAnswerId id, PossibleAnswer possibleAnswer, QuestionIgnoreJson question, Survey survey
			,CategoryIgnoreJson category
			) {
		this.id = id;
		this.possibleAnswer = possibleAnswer;
		this.question = question;
		this.survey = survey;
		this.category = category;
	}

	public MemberAnswer(MemberAnswerId id, PossibleAnswer possibleAnswer, QuestionIgnoreJson question, Survey survey,
			String freeTextAnswer 
			,CategoryIgnoreJson category
			) {
		this.id = id;
		this.possibleAnswer = possibleAnswer;
		this.question = question;
		this.survey = survey;
		this.freeTextAnswer = freeTextAnswer;
		this.category = category;
	}

	@EmbeddedId

	@AttributeOverrides({ @AttributeOverride(name = "surveyId", column = @Column(name = "survey_id", nullable = false)),
			@AttributeOverride(name = "questionId", column = @Column(name = "question_id", nullable = false)) })
	public MemberAnswerId getId() {
		return this.id;
	}

	public void setId(MemberAnswerId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "possible_answer_id")
	public PossibleAnswer getPossibleAnswer() {
		return this.possibleAnswer;
	}

	public void setPossibleAnswer(PossibleAnswer possibleAnswer) {
		this.possibleAnswer = possibleAnswer;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "question_id", nullable = false, insertable = false, updatable = false)
	public QuestionIgnoreJson getQuestion() {
		return this.question;
	}

	public void setQuestion(QuestionIgnoreJson question) {
		this.question = question;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "survey_id", nullable = false, insertable = false, updatable = false)
	@JsonIgnore
	public Survey getSurvey() {
		return this.survey;
	}

	public void setSurvey(Survey survey) {
		this.survey = survey;
	}

	@Column(name = "free_text_answer", length = 500)
	public String getFreeTextAnswer() {
		return this.freeTextAnswer;
	}

	public void setFreeTextAnswer(String freeTextAnswer) {
		this.freeTextAnswer = freeTextAnswer;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "category_id")
	public CategoryIgnoreJson getCategory() {
		return this.category;
	}

	public void setCategory(CategoryIgnoreJson category) {
		this.category = category;
	}

}
