package hibernateDataFiles;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import com.fasterxml.jackson.annotation.JsonIgnore;


/**
 * Questions generated by hbm2java
 */
@Entity
@Table(name = "questions", schema = "edi_ms")
public class QuestionIgnoreJson implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private long questionId;
	private CategoryIgnoreJson categoryIgnoreJson;
	private String questionText;
	private String answerType;
	private Long displayOrder;
	private Date effectiveDate;
	private Date expirationDate;
	private String createdBy;
	private Date updateDate;
	private String updatedBy;
	private List<PossibleAnswerIgnoreJson> possibleAnswers = new ArrayList<PossibleAnswerIgnoreJson>(0);
	private List<MemberAnswer> membersAnswerses = new ArrayList<MemberAnswer>(0);

	public QuestionIgnoreJson() {
	}

	public QuestionIgnoreJson(long questionId, CategoryIgnoreJson categoryIgnoreJson, String questionText) {
		this.questionId = questionId;
		this.categoryIgnoreJson = categoryIgnoreJson;
		this.questionText = questionText;
	}

	public QuestionIgnoreJson(long questionId, CategoryIgnoreJson categoryIgnoreJson, String questionText, String answerType, Long displayOrder,
			Date effectiveDate, Date expirationDate, List<PossibleAnswerIgnoreJson> possibleAnswers,
			List<MemberAnswer> membersAnswerses) {
		this.questionId = questionId;
		this.categoryIgnoreJson = categoryIgnoreJson;
		this.questionText = questionText;
		this.answerType = answerType;
		this.displayOrder = displayOrder;
		this.effectiveDate = effectiveDate;
		this.expirationDate = expirationDate;
		this.possibleAnswers = possibleAnswers;
		this.membersAnswerses = membersAnswerses;
	}

	@Id
	
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "question_id_seq")
	@SequenceGenerator(allocationSize = 1, name = "question_id_seq", sequenceName = "EDI_MS.question_id_seq")

	@Column(name = "question_id", unique = true, nullable = false)
	public long getQuestionId() {
		return this.questionId;
	}

	public void setQuestionId(long questionId) {
		this.questionId = questionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)	
	@JoinColumn(name = "category_id", nullable = false)
	@JsonIgnore
	public CategoryIgnoreJson getCategoryIgnoreJson() {
		return this.categoryIgnoreJson;
	}

	public void setCategoryIgnoreJson(CategoryIgnoreJson categoryIgnoreJson) {
		this.categoryIgnoreJson = categoryIgnoreJson;
	}

	@Column(name = "question_text", nullable = false)
	public String getQuestionText() {
		return this.questionText;
	}

	public void setQuestionText(String questionText) {
		this.questionText = questionText;
	}

	@Column(name = "answer_type", length = 1)
	public String getAnswerType() {
		return this.answerType;
	}

	public void setAnswerType(String answerType) {
		this.answerType = answerType;
	}

	@Column(name = "display_order")
	public Long getDisplayOrder() {
		return this.displayOrder;
	}

	public void setDisplayOrder(Long displayOrder) {
		this.displayOrder = displayOrder;
	}

//	@Temporal(TemporalType.DATE)
	@Column(name = "effective_date", length = 13)
	public Date getEffectiveDate() {
		return this.effectiveDate;
	}

	public void setEffectiveDate(Date effectiveDate) {
		this.effectiveDate = effectiveDate;
	}

//	@Temporal(TemporalType.DATE)
	@Column(name = "expiration_date", length = 13)
	public Date getExpirationDate() {
		return this.expirationDate;
	}

	public void setExpirationDate(Date expirationDate) {
		this.expirationDate = expirationDate;
	}
	
	@Column(name = "created_by", length = 20)
	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}
	
	@Column(name = "update_date", length = 13)
	public Date getUpdateDate() {
		return updateDate;
	}

	public void setUpdateDate(Date updateDate) {
		this.updateDate = updateDate;
	}
	
	@Column(name = "updated_by", length = 20)
	public String getUpdatedBy() {
		return updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}



	@OneToMany(fetch = FetchType.EAGER, mappedBy = "questionIgnoreJson")
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	public List<PossibleAnswerIgnoreJson> getPossibleAnswers() {
		return this.possibleAnswers;
	}

	public void setPossibleAnswers(List<PossibleAnswerIgnoreJson> possibleAnswersIgnoreJson) {
		this.possibleAnswers = possibleAnswersIgnoreJson;
	}

//	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
//	public List<MemberAnswer> getMembersAnswerses() {
//		return this.membersAnswerses;
//	}
//
//	public void setMembersAnswerses(List<MemberAnswer> membersAnswerses) {
//		this.membersAnswerses = membersAnswerses;
//	}

}
